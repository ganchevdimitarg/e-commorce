server:
  port: 8083

spring:
  #Security
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8082
          jwk-set-uri: http://localhost:8082/oauth2/jwks
      client:
        registration:
          gateway-client-oidc:
            provider: spring
            client-id: ${$GATEWAY_CLIENT_ID}
            client-secret: ${GATEWAY_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            redirect-uri: "http://127.0.0.1:8081/login/oauth2/code/{registrationId}"
        provider:
          spring:
            issuer-uri: http://localhost:8082
            authorization-uri: http://localhost:8082/oauth2/authorize
            token-uri: http://localhost:8082/oauth2/token

  #Data Source Properties
  data:
    mongodb:
      authentication-database: admin
      username: ${MONGO_DB_USER}
      password: ${MONGO_DB_PASSWORD}
      database: authentication
      port: 27017
      host: localhost
      auto-index-creation: true

  #Pagination
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  #Zipkin
  zipkin:
    base-url: http://localhost:9411

#Logging Levels
#Disable the default loggers
logging:
  level:
    blog: WARN
    root: INFO
    org:
      springframework:
        data: INFO
        web: INFO
        security: INFO
        oauth2: INFO

#Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

#Prometheus (and other data loggers)
management:
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    export:
      prometheus:
        enabled: true

#Spring Doc
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    disable-swagger-default-url: true
    oauth2RedirectUrl: http://127.0.0.1:8081/login/oauth2/code/gateway-client-oidc
    oauth:
      client-id: gateway
      client-secret: secret
      scopes:
        - openid
        - profile.read
        - profile.write
      use-pkce-with-authorization-code-grant: true
  oAuthFlow:
    authorizationUrl: http://localhost:8082/oauth2/authorize
    tokenUrl: http://localhost:8082/oauth2/token

#Kafka
kafka:
  bootstrapAddress: localhost:9092

#Resilience4j
resilience4j:
  circuitbreaker:
    instances:
      profile-service:
        failure-rate-threshold: 50
        minimum-number-of-calls: 10
        sliding-window-type: TIME_BASED
        sliding-window-size: 10
        wait-duration-in-open-state: 1000
        permitted-number-of-calls-in-half-open-state: 5
        register-health-indicator: true
  timelimiter:
    instances:
      profile-service:
        timeout-duration: 4s

#JWT secret key
jwt:
  secret:
    key: ${PASSWORD_RESET_TOKEN_SECRET_KEY}

payment:
  base:
    uri: http://127.0.0.1:8087/api/v1
  service:
    customer:
      post:
        uri: ${payment.base.uri}/payment/customer/create-customer
      get:
        uri: ${payment.base.uri}/payment/customer/get-customer?username=
      delete:
        uri: ${payment.base.uri}/payment/customer/delete-customer?username=
    card:
      post:
        uri: ${payment.base.uri}/payment/card/create-card
      get:
        uri: ${payment.base.uri}/payment/card/get-cards?username=

webClient:
  oath2Client:
    defaultClientRegistrationId: "gateway-client-oidc"