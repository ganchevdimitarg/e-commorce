server:
  port: 8081

spring:
  application:
    name: gateway-service

  #Zipkin
  zipkin:
    base-url: http://localhost:9411

  #Security
  security:
    oauth2:
      client:
        registration:
          gateway-client-oidc:
            provider: spring
            client-id: ${GATEWAY_CLIENT_ID}
            client-secret: ${GATEWAY_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8081/login/oauth2/code/{registrationId}"
            scope:
              - openid
              - catalog.read
              - catalog.write
              - profile.read
              - profile.write
              - order.read
              - order.write
              - notification.read
              - notification.write
            client-name: gateway-client-oidc
          google:
            provider: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://127.0.0.1:8081/login/oauth2/code/{registrationId}
            scope:
              - openid
              - email
              - profile
          github:
            provider: github
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: http://127.0.0.1:8081/login/oauth2/code/{registrationId}
          facebook:
            provider: facebook
            client-id: ${FACEBOOK_CLIENT_ID}
            client-secret: ${FACEBOOK_CLIENT_SECRET}
            redirect-uri: http://127.0.0.1:8081/login/oauth2/code/{registrationId}
        provider:
          spring:
            issuer-uri: http://127.0.0.1:8082
            authorization-uri: http://127.0.0.1:8082/oauth2/authorize
            token-uri: http://127.0.0.1:8082/oauth2/token
          google:
            issuer-uri: https://accounts.google.com
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
          github:
#            issuer-uri: https://token.actions.githubusercontent.com
            jwk-set-uri: https://token.actions.githubusercontent.com/.well-known/jwks
          facebook:
#            issuer-uri: https://www.facebook.com
            authorization-uri: https://facebook.com/dialog/oauth/
            jwk-set-uri: https://www.facebook.com/.well-known/oauth/openid/jwks/
  config:
    import: optional:vault://

  cloud:
    vault:
      authentication: TOKEN
      token: ${VAULT_SERVER_TOKEN}
      uri: http://localhost:8200
      application-name: gateway-service/dev
      generic:
        enabled: true
        backend: secret

    #Gateway
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      default-filters:
        - TokenRelay
        - name: Retry
          args:
            retries: 3
            method: GET
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
      routes:
        - id: catalog-service
          uri: "lb://catalog-service"
          predicates:
            - Path=/api/v1/catalog/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogService
                fallbackUri: forward:/fallback
        - id: profile-service
          uri: "lb://profile-service"
          predicates:
            - Path=/api/v1/profile/**
          filters:
            - name: CircuitBreaker
              args:
                name: profileService
                fallbackUri: /fallback
        - id: notification-service
          uri: "lb://notification-service"
          predicates:
            - Path=/api/v1/notification/**
          filters:
            - name: CircuitBreaker
              args:
                name: notificationService
                fallbackUri: forward:/fallback
        - id: order-service
          uri: "lb://order-service"
          predicates:
            - Path=/api/v1/order/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderService
                fallbackUri: forward:/fallback
        - id: payment-service
          uri: "lb://payment-service"
          predicates:
            - Path=/api/v1/payment/**
          filters:
            - name: CircuitBreaker
              args:
                name: paymentService
                fallbackUri: forward:/fallback
#      httpserver:
#        wiretap: true
#      httpclient:
#        wiretap: true

#Resilience4j
resilience4j.circuitbreaker:
  configs:
    default:
      failureRateThreshold: 50
      minimumNumberOfCalls: 10
      slidingWindowType: TIME_BASED
      slidingWindowSize: 10
      waitDurationInOpenState: 1000
      permittedNumberOfCallsInHalfOpenState: 5
      registerHealthIndicator: true
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.util.concurrent.TimeoutException
        - java.io.IOException
  instances:
    catalogService:
      baseConfig: default
    profileService:
      baseConfig: default
    notificationService:
      baseConfig: default
    orderService:
      baseConfig: default
    paymentService:
      baseConfig: default

resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 5s
      cancelRunningFuture: true
  instances:
    catalogService:
      baseConfig: default
    profileService:
      baseConfig: default
    notificationService:
      baseConfig: default
    orderService:
      baseConfig: default
    paymentService:
      baseConfig: default

#Logging Levels
#Disable the default loggers
logging:
  level:
    root: ERROR
    org.springframework.web: trace
#    org.springframework.cloud.gateway: trace
#    logging.level.io.github.resilience4j: trace
#    org.springframework.http.server.reactive: trace
#    reactor.netty: trace

#Prometheus (and other data loggers)
management:
  #  server:
  #    port: 8081
  #    ssl:
  #      enabled: false
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    prometheus:
      enabled: true
    metrics:
      enabled: true
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

#Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: false