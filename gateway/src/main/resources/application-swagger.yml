server:
  port: 8081

spring:
  application:
    name: gateway-service

  #Zipkin
  zipkin:
    base-url: http://localhost:9411

  #Security
  security:
    oauth2:
      client:
        registration:
          gateway-client-oidc:
            provider: spring
            client-id:
            client-secret:
            authorization-grant-type: authorization_code
            redirect-uri: "http://127.0.0.1:8081/login/oauth2/code/{registrationId}"
            scope: openid, admin:read, admin:write, worker:read, worker:write, user:read, user:write
            client-name: gateway-client-oidc
        provider:
          spring:
            issuer-uri: http://localhost:8082
            authorization-uri: http://localhost:8082/oauth2/authorize
            token-uri: http://localhost:8082/oauth2/token

  #Gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lowerCaseServiceId: true
      default-filters:
        - TokenRelay
        - name: Retry
          args:
            retries: 3
            method: GET
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
      routes:
        - id: catalog-service
          uri: lb://catalog-service
          predicates:
            Path=/api/v1/catalog/**
          filters:
            - RewritePath=/api/v1/catalog/?(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: catalogService
                fallbackUri: forward:/catalog-fallback
        - id: profile-service
          uri: lb://profile-service
          predicates:
            - Path=/api/v1/profile/**
          filters:
            - RewritePath=/api/v1/profile/?(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: catalogService
                fallbackUri: forward:/profile-fallback
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/v1/notification/**
          filters:
            - RewritePath=/api/v1/notification/?(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: catalogService
                fallbackUri: forward:/notification-fallback
        - id: order-service
          uri: lb://order-service
          predicates:
            - Path=/api/v1/order/**
          filters:
            - RewritePath=/api/v1/order/?(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
            - name: CircuitBreaker
              args:
                name: catalogService
                fallbackUri: forward:/order-fallback

resilience4j:
  circuitbreaker:
    instances:
      catalogService:
        sliding-window-size: 10
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 1000
        register-health-indicator: true
  timelimiter:
    instances:
      catalogService:
        timeout-duration: 3s

#SpringDoc
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    urls:
      - name: catalog-service
        url: /v3/api-docs
      - name: profile-service
        url: /v3/api-docs
      - name: notification-service
        url: /v3/api-docs
      - name: order-service
        url: /v3/api-docs
    disable-swagger-default-url: true
    oauth2RedirectUrl: http://127.0.0.1:8081/login/oauth2/code/gateway-client-oidc
    oauth:
      client-id: gateway
      client-secret: secret
      use-pkce-with-authorization-code-grant: true
  oAuthFlow:
    authorizationUrl: http://localhost:8082/oauth2/authorize
    tokenUrl: http://localhost:8082/oauth2/token


#Logging Levels
#Disable the default loggers
logging:
  level:
    root: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.security.oauth2: INFO

#Prometheus (and other data loggers)
management:
  endpoints:
    web:
      exposure:
        include: gateway
  endpoint:
    prometheus:
      enabled: 'true'
    metrics:
      enabled: 'true'
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: 'true'

#Eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka


