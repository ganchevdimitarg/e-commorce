version: '3.8'
services:
  db:
    image: mysql
    container_name: mysqldb
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: catalog
      MYSQL_USERNAME: "${MYSQL_USER}"
      MYSQL_ROOT_PASSWORD: "${MYSQL_PASSWORD}"
    networks:
      - mysql
    ports:
      - "3306:3306"
    expose:
      - "3306"

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - data:/data
    networks:
      - mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_DB_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_DB_PASSWORD}"

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - spring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    user: "4096"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - /grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - grafana/config.monitoring
    restart: unless-stopped
    networks:
      - loki
      - spring

  loki:
    image: grafana/loki:2.4.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki/loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml
    restart: unless-stopped
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.4.0
    container_name: promtail
    volumes:
      - ./loki/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/log:/var/log
    command: -config.file=/etc/promtail/promtail-config.yml
    restart: unless-stopped
    networks:
      - loki

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - "9100:9100"
    restart: always

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8080:8080"
    devices:
      - /dev/kmsg:/dev/kmsg
    restart: always

  vault:
    image: hashicorp/vault
    container_name: vault
    restart: unless-stopped
    volumes:
      - ./vault:/helpers
      - vault_data:/vault/file
    ports:
      - "8201:8200/tcp"
    cap_add:
      - IPC_LOCK
    entrypoint: "vault server -config=/helpers/vault-config.hcl"
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8200 || exit 1
      interval: 10s
      retries: 12
      start_period: 10s
      timeout: 10s
    networks:
      - spring
      - vault

  vault-agent:
    image: hashicorp/vault
    container_name: vault-agent
    restart: unless-stopped
    ports:
      - "8200:8200"
    volumes:
      - ./vault:/helpers
    environment:
      VAULT_ADDR: "http://vault:8200"
    networks:
      - spring
      - vault
    entrypoint: "vault agent -log-level debug -config=/helpers/vault-agent.hcl"
    depends_on:
      vault:
        condition: service_healthy

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      if you want to start Kafka locally change PLAINTEXT://kafka:9092 to PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - spring

  eureka-server:
    image: dgganchev/eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
    networks:
      - spring
    depends_on:
      - zipkin

  auth-server:
    image: dgganchev/authentication:latest
    container_name: auth-server
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - vault
      - spring
      - postgres
      - mongodb
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - mongodb
      - postgres

  gateway:
    image: dgganchev/gateway:latest
    container_name: gateway-service
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - spring
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - auth-server

  catalog:
    image: dgganchev/catalog:latest
    container_name: catalog-service
    ports:
      - "8084:8084"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - spring
      - mysql
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - db

  order:
    image: dgganchev/order:latest
    container_name: order-service
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - spring
      - postgres
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - postgres
      - kafka
      - auth-server

  profile:
    image: dgganchev/profile:latest
    container_name: profile-service
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
#      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
#    command: java -Djava.security.egd=file:/dev/./urandom -jar profile-0.0.1-SNAPSHOT.jar
    networks:
      - spring
      - mongodb
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - mongodb
      - kafka
      - auth-server

  notification:
    image: dgganchev/notification:latest
    container_name: notification-service
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - spring
      - postgres
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - postgres
      - kafka

  payment:
    image: dgganchev/payment:latest
    container_name: payment-service
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      VAULT_SERVER_TOKEN: "${VAULT_SERVER_TOKEN}"
    networks:
      - spring
      - postgres
      - vault
    depends_on:
      - zipkin
      - eureka-server
      - prometheus
      - vault
      - postgres

networks:
  postgres:
    driver: bridge
  mongodb:
    driver: bridge
  mysql:
    driver: bridge
  spring:
    driver: bridge
  vault:
    driver: bridge
  loki:
volumes:
  db:
  prometheus_data: { }
  grafana_storage: { }
  data: { }
  postgres:
  vault_data: { }
